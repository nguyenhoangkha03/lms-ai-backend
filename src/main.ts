import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ConfigService } from '@nestjs/config';
import { ValidationPipe } from '@nestjs/common';
import helmet from 'helmet';
import * as compression from 'compression';
import { AllExceptionsFilter } from '@/common/filters/http-exception.filter';
import { ValidationExceptionFilter } from '@/common/filters/validation-exception.filter';
import { LoggingInterceptor } from '@/common/interceptors/logging.interceptor';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { WinstonService } from '@/logger/winston.service';
import { SSLConfig } from '@/config/ssl.config';
import * as cookieParser from 'cookie-parser';
import { SanitizeInterceptor } from '@/common/interceptors/sanitize.interceptor';
import { JwtAuthGuard } from './modules/auth/guards/jwt-auth.guard';

async function bootstrap() {
  const httpsOptions = SSLConfig.getHttpsOptions();
  const app = await NestFactory.create(AppModule, { httpsOptions });

  const logger = app.get(WinstonService);
  logger.setContext('Bootstrap');
  app.useLogger(logger);

  logger.log('Application started');

  const configService = app.get(ConfigService);
  const port = configService.get<number>('app.port');
  const apiPrefix = configService.get<string>('app.apiPrefix');
  const corsOrigins = configService.get<string[]>('app.corsOrigins');
  const securityHelmet = configService.get<boolean>('security.helmet');
  const securityCompression = configService.get<boolean>('security.compression');
  const cookieSecret = configService.get<string>('cookie.secret');

  // Security middleware
  if (securityHelmet) {
    app.use(
      helmet({
        // N√†y tr√¨nh duy·ªát, khi hi·ªÉn th·ªã trang web c·ªßa t√¥i, anh ch·ªâ ƒë∆∞·ª£c ph√©p t·∫£i v√† th·ª±c thi t√†i nguy√™n
        // t·ª´ nh·ªØng ngu·ªìn m√† t√¥i ƒë√£ ph√™ duy·ªát trong danh s√°ch n√†y.
        // B·∫•t k·ª≥ th·ª© g√¨ kh√¥ng c√≥ trong danh s√°ch, h√£y ch·∫∑n l·∫°i v√† b√°o c√°o cho t√¥i."
        contentSecurityPolicy: {
          // C√°c Ch·ªâ Th·ªã C·ª• Th·ªÉ
          directives: {
            defaultSrc: ["'self'"], // ch·ªâ cho ph√©p t√†i nguy√™n t·ª´ ch√≠nh domain c·ªßa trang web n√†y
            scriptSrc: ["'self'", "'unsafe-inline'"], // unsafe-inline Cho ph√©p th·ª±c thi m√£ JavaScript ho·∫∑c CSS ƒë∆∞·ª£c vi·∫øt tr·ª±c ti·∫øp trong file HTML
            styleSrc: ["'self'", "'unsafe-inline'"], // unsafe-inline Cho ph√©p th·ª±c thi m√£ JavaScript ho·∫∑c CSS ƒë∆∞·ª£c vi·∫øt tr·ª±c ti·∫øp trong file HTML
            imgSrc: ["'self'", 'data:', 'https:'], // Cho ph√©p t·∫£i t√†i nguy√™n t·ª´ data: URI, Cho ph√©p t·∫£i t√†i nguy√™n t·ª´ b·∫•t k·ª≥ domain n√†o s·ª≠ d·ª•ng giao th·ª©c HTTPS.
            connectSrc: ["'self'"],
            fontSrc: ["'self'"],
            objectSrc: ["'none'"], // C·∫•m ho√†n to√†n vi·ªác nh√∫ng c√°c plugin c≈© v√† kh√¥ng an to√†n nh∆∞ Flash, Silverlight.
            mediaSrc: ["'self'"],
            frameSrc: ["'none'"], // C·∫•m ho√†n to√†n trang web c·ªßa b·∫°n b·ªã nh√∫ng v√†o trong c√°c th·∫ª <iframe> ho·∫∑c <frame> tr√™n c√°c trang kh√°c
          },
        },
        crossOriginEmbedderPolicy: false, // Khi b·∫≠t (true), n√≥ y√™u c·∫ßu t·∫•t c·∫£ c√°c t√†i nguy√™n t·ª´ domain kh√°c ph·∫£i c√≥ m·ªôt c∆° ch·∫ø cho ph√©p ƒë·∫∑c bi·ªát (g·ªçi l√† COEP) m·ªõi ƒë∆∞·ª£c nh√∫ng v√†o trang c·ªßa b·∫°n.
      }),
    );
  }

  // D√πng th∆∞ vi·ªán compression (Express middleware) ƒë·ªÉ n√©n d·ªØ li·ªáu HTTP response (th∆∞·ªùng l√† gzip ho·∫∑c Brotli).
  if (securityCompression) {
    app.use(compression());
  }

  // Cookie parser middleware
  app.use(cookieParser(cookieSecret));

  // CORS configuration
  app.enableCors({
    // origin domain c·ªßa ng∆∞·ªùi ƒëang mu·ªën nh·∫≠p c·∫£nh (v√≠ d·ª•: https://my-frontend.com). Gi√° tr·ªã n√†y c√≥ th·ªÉ l√† undefined!
    origin: (origin, callback) => {
      // Allow requests with no origin (mobile apps, Postman, etc.)
      if (!origin) return callback(null, true);

      if (corsOrigins!.includes('*') || corsOrigins!.includes(origin)) {
        return callback(null, true);
      }

      return callback(new Error('Not allowed by CORS'), false);
    },
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'], // Vi·ªác bao g·ªìm 'OPTIONS' l√† b·∫Øt bu·ªôc ƒë·ªÉ c√°c "cu·ªôc g·ªçi thƒÉm d√≤" (preflight requests) c√≥ th·ªÉ ho·∫°t ƒë·ªông.
    // "du kh√°ch" g·ª≠i h√†nh l√Ω (request), h·ªç ƒë∆∞·ª£c ph√©p ƒë√≠nh k√®m nh·ªØng lo·∫°i "gi·∫•y t·ªù" (header) n√†o.
    allowedHeaders: [
      'Content-Type', // C·∫ßn thi·∫øt khi frontend g·ª≠i d·ªØ li·ªáu JSON (application/json)
      'Authorization', // C·ª±c k·ª≥ quan tr·ªçng. N·∫øu kh√¥ng c√≥ header n√†y, frontend s·∫Ω kh√¥ng th·ªÉ g·ª≠i JWT token hay b·∫•t k·ª≥ th√¥ng tin x√°c th·ª±c n√†o kh√°c
      'X-Requested-With', // D√πng ƒë·ªÉ ch·ªâ ra request n√†y ƒë∆∞·ª£c g·ª≠i b·ªüi JavaScript (AJAX) ch·ª© kh√¥ng ph·∫£i form truy·ªÅn th·ªëng.
      'X-Access-Token', // Header t√πy ch·ªânh (custom) b·∫°n t·∫°o ra ƒë·ªÉ g·ª≠i token ho·∫∑c d·ªØ li·ªáu x√°c th·ª±c
      'Cache-Control', // ƒêi·ªÅu khi·ªÉn c√°ch tr√¨nh duy·ªát cache response (ho·∫∑c y√™u c·∫ßu server ph·∫£n h·ªìi d·ªØ li·ªáu m·ªõi)
    ],
    credentials: true, // "Credentials" ·ªü ƒë√¢y c√≥ th·ªÉ l√† cookie ho·∫∑c HTTP authentication headers (nh∆∞ Authorization).
    optionsSuccessStatus: 200, // T√πy ch·ªçn n√†y li√™n quan ƒë·∫øn "cu·ªôc g·ªçi thƒÉm d√≤" (preflight request) s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c OPTIONS.
  });

  // Global prefix
  app.setGlobalPrefix(apiPrefix!);

  // Global pipes
  app.useGlobalPipes(
    new ValidationPipe({
      transform: true, //  (v√≠ d·ª• chu·ªói s·ªë "123" th√†nh s·ªë 123), h√£y t·ª± ƒë·ªông l√†m ƒëi·ªÅu ƒë√≥.
      whitelist: true, // lo·∫°i b·ªè nh·ªØng thu·ªôc t√≠nh kh√¥ng c√≥ trong dto
      forbidNonWhitelisted: true, // N·∫øu ph√°t hi·ªán c√≥ th√†nh ph·∫ßn th·ª´a, kh√¥ng ch·ªâ lo·∫°i b·ªè m√† h√£y t·ª´ ch·ªëi to√†n b·ªô l√¥ h√†ng ngay l·∫≠p t·ª©c (b√°o l·ªói)
      transformOptions: {
        enableImplicitConversion: true, // N·∫øu anh th·∫•y m·ªôt gi√° tr·ªã l√† chu·ªói, nh∆∞ng trong b·∫£n thi·∫øt k·∫ø (type hint ·ªü controller) n√≥ ƒë∆∞·ª£c khai b√°o l√† number ho·∫∑c boolean, h√£y t·ª± ƒë·ªông v√† ng·∫ßm ƒë·ªãnh chuy·ªÉn ƒë·ªïi n√≥ sang ki·ªÉu d·ªØ li·ªáu ƒë√∫ng.
      },
      exceptionFactory: errors => {
        const errorMessages = {};
        errors.forEach(error => {
          errorMessages[error.property] = Object.values(error.constraints || {});
        });
        return {
          message: 'Validation failed',
          errors: errorMessages,
          statusCode: 400,
        };
      },
    }),
  );

  // Global filters
  app.useGlobalFilters(new ValidationExceptionFilter(), new AllExceptionsFilter());

  // Global interceptors
  app.useGlobalInterceptors(new LoggingInterceptor(), new SanitizeInterceptor());

  // Global guards (JWT auth by default, use @Public() to skip)
  const jwtAuthGuard = app.get(JwtAuthGuard);
  app.useGlobalGuards(jwtAuthGuard);

  // Swagger documentation
  if (process.env.NODE_ENV !== 'production') {
    const config = new DocumentBuilder()
      .setTitle('LMS AI Backend API')
      .setDescription('AI-Powered Learning Management System Backend API Documentation')
      .setVersion('1.0')
      .addBearerAuth(
        {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
          name: 'JWT',
          description: 'Enter JWT token',
          in: 'header',
        },
        'JWT-auth',
      )
      .addCookieAuth('access-token', {
        type: 'apiKey',
        in: 'cookie',
        name: 'access-token',
        description: 'Access token cookie',
      })
      .addServer(`http://localhost:${port}`)
      .addServer(`https://localhost:${port}`)
      .build();

    const document = SwaggerModule.createDocument(app, config);
    SwaggerModule.setup(`${apiPrefix}/docs`, app, document, {
      swaggerOptions: {
        persistAuthorization: true,
        tagsSorter: 'alpha', // S·∫Øp x·∫øp c√°c nh√≥m API (controller) v√† c√°c API (endpoint) theo th·ª© t·ª± b·∫£ng ch·ªØ c√°i, gi√∫p giao di·ªán g·ªçn g√†ng, chuy√™n nghi·ªáp h∆°n.
        operationsSorter: 'alpha',
      },
      customSiteTitle: 'LMS AI API Documentation', // T√πy ch·ªânh ti√™u ƒë·ªÅ tr√™n tab c·ªßa tr√¨nh duy·ªát.
    });

    logger.log(
      `üìö Swagger documentation: ${httpsOptions ? 'https' : 'http'}://localhost:${port}/${apiPrefix}/docs`,
    );
  }

  // Graceful shutdown
  // Khi b·∫°n nh·∫•n Ctrl + C trong terminal
  process.on('SIGTERM', async () => {
    logger.log('SIGTERM received, shutting down gracefully');
    await app.close();
    process.exit(0);
  });

  // Khi process b·ªã kill (th∆∞·ªùng t·ª´ h·ªá ƒëi·ªÅu h√†nh, Docker, ho·∫∑c deploy system nh∆∞ Kubernetes)
  process.on('SIGINT', async () => {
    logger.log('SIGINT received, shutting down gracefully');
    await app.close();
    process.exit(0);
  });

  // Handle uncaught exceptions
  // L·ªói ch∆∞a try/catch
  process.on('uncaughtException', error => {
    logger.error('Uncaught Exception:' + error.stack);
    process.exit(1);
  });

  // Promise b·ªã reject m√† kh√¥ng catch
  process.on('unhandledRejection', (reason, promise) => {
    logger.error('Unhandled Rejection at' + promise + 'reason:' + reason);
    process.exit(1);
  });

  //   await app.listen(process.env.PORT ?? 3000);
  const server = await app.listen(port!);

  server.setTimeout(30000); // 30 seconds

  const protocol = httpsOptions ? 'https' : 'http';
  logger.log(`üöÄ Application is running on: ${protocol}://localhost:${port}/${apiPrefix}`);
  logger.log(`üîê Security features: ${httpsOptions ? 'HTTPS ‚úÖ' : 'HTTP ‚ö†Ô∏è'}`);
  logger.log(`üõ°Ô∏è Security middleware: Helmet ‚úÖ, CORS ‚úÖ, Rate Limiting ‚úÖ`);
}

bootstrap().catch(err => {
  console.error('Error starting application:', err);
  process.exit(1);
});
